# -*- coding: utf-8 -*-
"""Work_with_Spreadsheets_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HfuIkCpjABO02nRovEWsgvEFS2qHo_hz

# **Trabalhando com planilhas do *Excel***
"""

#importando a biblioteca
import pandas as pd

# Leitura dos arquivos
df1 = pd.read_excel("./datasets/Aracaju.xlsx")
df2 = pd.read_excel("./datasets/Fortaleza.xlsx")
df3 = pd.read_excel("./datasets/Natal.xlsx")
df4 = pd.read_excel("./datasets/Recife.xlsx")
df5 = pd.read_excel("./datasets/Salvador.xlsx")

# Juntando os arquivos (concatenar)
df = pd.concat([df1, df2, df3, df4, df5])

# 5 primeiras amostras
df.head()

# 5 ultimas amostras
df.tail()

# 5 amostras aleatórias
df.sample(5)

# Verificar o tipo de dado de cada coluna
df.dtypes

# Alterando o tipo de dado da coluna LojaID
df['LojaID'] = df['LojaID'].astype("object")

df.dtypes

df.isnull().sum()

# Substituindo os valores nulos pela média
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

df.isnull().sum()

df.sample(15)

df["Vendas"].mean()

"""
# **Criando novas colunas**
"""

# Criando a coluna de receita
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

# Retornando a maior receita
df["Receita"].max()

# Retornando a menor receita
df["Receita"].min()

# Retorna as n linhas com maiores receitas
df.nlargest(3, "Receita")

# Retorna as n linhas com menores receitas
df.nsmallest(3, "Receita")

df.groupby("Cidade")["Receita"].sum()

# Ordenando o conjunto de dados, de forma crescente, pela receita
df.sort_values("Receita", ascending=False).head(10)

# Ordenando o conjunto de dados, de forma decrescente, pela receita
df.sort_values("Receita", ascending=True).head(10)

"""
# **Trabalhando com Datas**"""

df.dtypes

# Transformando a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("int64")

df.dtypes

df.head()

# Transformando coluna de data em data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

df.head()

# Agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

# Criando uma nova coluna com o ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

# Extraindo o mês e o dia
df["Mes_Venda"], df["Dia_Venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

# Retornando a data mais antiga
df["Data"].min()

# Calculando a diferença entre datas
df["Diferenca_Dias"] = df["Data"] - df["Data"].min()

df.sample(5)

# Criando a coluna de trimestre
df["Trimestre_Venda"] = df["Data"].dt.quarter

df.sample(5)

# Filtrando as vendas de 2019, mês de março
vendas_marco_2019 = df.loc[
    (df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)
]

vendas_marco_2019.sample(10)

"""
# **Visualização de Dados**"""

# Retorna a quantidade numérica de cada valor da coluna
df['LojaID'].value_counts(ascending=False)

# Gráfico de barras
df['LojaID'].value_counts(ascending=False).plot.bar()

# Gráfico de barras horizontais
df['LojaID'].value_counts().plot.barh()

df['LojaID'].value_counts(ascending=True).plot.barh()

df['LojaID'].value_counts(ascending=True).plot.barh();

# Gráfico de Pizza
df.groupby(df['Data'].dt.year)['Receita'].sum().plot.pie();

# Total de vendas por cidade
df['Cidade'].value_counts()

# Adicionando um título e alterando o nome dos eixos
import matplotlib.pyplot as plt

df['Cidade'].value_counts().plot.bar(title="Total vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas")

# Alterando a cor
df['Cidade'].value_counts().plot.bar(title="Total vendas por Cidade", color="red")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

# Alterando o estilo
plt.style.use("ggplot")

df.groupby(df['Mes_Venda'])['Qtde'].sum().plot(title='Total Produtos Vendidos x Mês')
plt.xlabel('Mês')
plt.ylabel('Total Produtos Vendidos')
plt.legend(['Quantidade']);

df.groupby(df['Mes_Venda'])['Qtde'].sum()

# Selecionando apenas as vendas de 2019
df_2019 = df[df['Ano_Venda'] == 2019]

df_2019.groupby(df_2019["Mes_Venda"])["Qtde"].sum()

# Total produtos vendidos por mês
df_2019.groupby(df_2019["Mes_Venda"])["Qtde"].sum().plot(marker="v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend(['Quantidade']);

# Total produtos vendidos por mês
df_2019.groupby(df_2019["Mes_Venda"])["Qtde"].sum().plot(marker="o")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend(['Quantidade']);

# Histograma
plt.hist(df['Qtde'], color='orangered');

plt.scatter(x=df_2019['Dia_Venda'], y=df_2019['Receita']);

# Salvando em png
df_2019.groupby(df_2019["Mes_Venda"])["Qtde"].sum().plot(marker="v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend(['Quantidade']);
plt.savefig("grafico_Qtde_Mes.png")